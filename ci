ci工作首先要从开发出发, 根据开发的需求, 分析所有的场景与需要进行检测的特性.
然后根据场景图, 分析需要的产品包, 用例, 以及环境.

	* 出包
	* 
		* 白盒环境的申请
		* 仓和代码分支的选择与日常维护
		* 快速出包

	* 环境安装
	* 
		* 环境指的是黑盒环境: 不关注代码细节, 只关注操作与结果的对应的关系
		* 一台window跳转机或者叫执行机, 一个ideploy节点, 和多个ac与snc节点
		* windows样要进行域与dns的配置, 常用软件的安装, 支撑库与脚本库拉取与蝴蝶工具的配置
		* ideploy节点上要进行ideploy的安装
		* ac节点和snc节点要进行rpm包的安装
		* 作为ntp-server的节点要开启ntp服务

	* 用例
	* 
		* 清晰传达需要检测的特性与检测的方式
		* 提供安装包和环境供测试调试
		* 测试根据需要编写测试用例脚本, 测试用例文档, 测试套脚本, 调整测试床文件, 出测试套文件
		* 测试用例编写完成后进行验收

	* 调度
	* 
		* 测试用例文档上传到蝴蝶工具
		* 测试用例脚本, 测试套脚本, 测试套文件上传脚本代码仓
		* 测试床提交给调度人员审核
		* 与CIO沟通明确的调度需求
		* 
			* 取包地址
			* 取测试套文件的路径
			* 测试床的规格
			* 调度周期与调度时刻
			* 调度方式
			* 
				* 直接跑脚本
				* 先起版本再跑脚本
				* 
					* 起安装配置升级任务
					* 起容灾任务





这些都完成之后, 就实现了测试用例的落地. 之后就是日常的ci分析与闭环, 每天关注蝴蝶上各个环境与用例的情况. 理想情况当然是持续完成代码漏洞的检出与修复.
但这中间还会有很多和代码无关的问题可能导致ci问题.
比如出包失败, 环境外借后未卸载导致环境残留失败, 蝴蝶工具问题导致取包失败, it问题导致节点断连, 跑测试用例时偶然也因为ideploy一些页面元素未刷出, 导致测试用例阻塞, 新需求调整页面元素而测试用例没有及时更新等等.
而其实日常工作中, 往往是后一部分占据了ci工作的大部分时间.
